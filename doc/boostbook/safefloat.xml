<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.1//EN"
"http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<library dirname="safe_float" id="safe_float"
         last-revision="$Date: 2015-02-09$" name="safe_float"
         url="https://github.com/sdavtaker/safe_float">
  <title><libraryname
  last-revision="2015-02-09">safe_float</libraryname></title>

  <libraryinfo>
    <author>
      <firstname>Damián</firstname>

      <surname>Vicino</surname>
    </author>

    <copyright>
      <year>2015</year>

      <holder>Damián Vicino</holder>
    </copyright>

    <legalnotice>
      <para><ulink url="http://www.boost.org/users/license.html">BOOST
      License</ulink></para>
    </legalnotice>

    <librarypurpose>Safe Floating Point Operation</librarypurpose>

    <librarycategory name="">Numerics</librarycategory>
  </libraryinfo>

  <section id="safe_float.introduction">
    <title>Introduction</title>

    <section>
      <title>Motivation</title>

      <para>Arithmetic operations in C++ are NOT guaranteed to yield a correct
      mathematical result. For instance, the overflow on addition operation
      may produce an infinite value. Safe Float proposes implementing a
      drop-in replacement for floating point numeric data types guaranteing
      that, when used in expressions in a C++ program, no incorrect arithmetic
      results will be produced without the developer awareness.</para>

      <para>An example of the problem:</para>

      <programlisting>#include &lt;iostream&gt;
#include &lt;limits&gt;

int main(){
using namespace std;
float a = numeric_limits&lt;float&gt;::max();
float b = a + numeric_limits&lt;float&gt;::max();
cout &lt;&lt; "b is " &lt;&lt; b &lt;&lt; endl;

return 0;
}</programlisting>

      <para>Executing this code outputs:</para>

      <programlisting>b is inf</programlisting>

      <para>This is a convenient fallback for the overflow in some contexts,
      but an unexpected silent surprise in others. Overflow to infinite is not
      the only surprice silently introduced by floating point operations,
      neither the most dangerous. it is actually the one most programmers care
      to check.</para>

      <para>In 1991, David Goldberg collected a list of the most common
      dangers when developing using Floating Point, which can be found on his
      paper: "What every computer scientist should know about floating-point
      arithmetic".</para>

      <para>Most important dangers can be classified as follows:</para>

      <para><itemizedlist>
          <listitem>
            <para>Rounding error</para>

            <para>Some operations may require rounding the result. (i.e.
            because the mantissa is not large enough to keep the
            result.)</para>

            <para>Definition error. (i.e. 0.3 is not expressible as Floating
            Point.)</para>

            <para>An interesting side-effect of rounding is that operations
            are not guaranteed to be reversible: a != a+b-b is a valid
            result.</para>
          </listitem>

          <listitem>
            <para>Not a Number</para>

            <para>Some operations may produce Not a Number results, and they
            are not detected until used (if signalling is on).</para>
          </listitem>

          <listitem>
            <para>Infinity by overflow</para>

            <para>Infinity arithmetic is useful mostly when infinity values
            are defined by user, and not because of an overflow.</para>
          </listitem>

          <listitem>
            <para>Signed zero</para>

            <para>In some cases as discontinuous functions the negative zero
            have important use.</para>
          </listitem>

          <listitem>
            <para>Underflow (considering and not considering normalised
            numbers as underflow)</para>
          </listitem>
        </itemizedlist></para>

      <para>A real world example of the issue is the use of Floating Point in
      Discrete Event System Specification simulation to define the temporal
      position of the events in a Real timeline. In this context, developers
      intensively use Floating Point and they usually give a special meaning
      to the infinite values called Passive state in the literature. In their
      context, an infinite obtained as overflow operating with finite numbers
      produces incorrect simulation result, because it silently changes the
      state to passive when it should not.</para>

      <para>In C++11 standard cfenv.h was introduced facilitating the access
      to the Floating Point Unit flags for controlling and checking
      information related to Floating Point operations. This allows us to have
      a higher level of control than the one we had on traditional C++.</para>

      <para>Anyway, developer intervention is required for checking every
      Floating Point operation was conducted as expected. Doing so, renders
      the code harder to read, maintain and it adds a new source of potential
      programming errors.</para>

      <para>Safe_float proposes the introduction of a class template wrapping
      Floating Point data types introducing safety checks for arithmetic
      operations. In the case an operation result is unreliable it reports the
      user properly.</para>

      <para>Depending on the algorithms implemented, different safety measures
      may be required, in our previously described example with the use of
      infinities for Discrete Event Simulation, the algorithms are not
      sensitive to rounding and this should not be treated as a safety
      problem, neither have a performance penalty based the unused
      check.</para>

      <para>Since, the reliability of the results is based on the algorithms
      used, we propose letting developers declare their concerns using
      template parameters as policies.</para>

      <para>We show some usage examples below for illustration.</para>

      <programlisting>//no underflow example

safe_numerics&lt;double, no_underflow&gt; a = 1;

safe_numerics&lt;double, no_underflow&gt; b = numeric_limits&lt;double&gt;::max();

safe_numerics&lt;double, no_underflow&gt; c =  a / b ; //throws because of underflow.

//no rounding example

safe_numerics&lt;double, no_rounding&gt; d = 0.3; // compilation error, the number is not representable.

safe_numerics&lt;double, no_rounding&gt; e = 2E25; 

safe_numerics&lt;double, no_rounding&gt; f = 2E100;

safe_numerics&lt;double, no_rounding&gt; g = e + f ; //throws because of operation rounding.

//multiple conditions example

safe_numerics&lt;double, BSF_COMBINE(no_rounding,no_overflow_to_infinity)&gt; h = numeric_limits&lt;double&gt;::max();

safe_numerics&lt;double, BSF_COMBINE(no_rounding,no_overflow_to_infinity)&gt; i =  numeric_limits&lt;double&gt;::max();

safe_numerics&lt;double, BSF_COMBINE(no_rounding-no_overflow_to_infinity)&gt; j = h + i; // throws because of overflow to infinity.</programlisting>

      <para/>
    </section>

    <section>
      <title>Goals</title>

      <para><itemizedlist>
          <listitem>
            <para>Provide a drop-in replacement for Floating Point data types
            producing one of the following outcomes for each operation:</para>

            <para><itemizedlist>
                <listitem>
                  <para>A valid result covering the user safety
                  definition.</para>
                </listitem>

                <listitem>
                  <para>A compilation error.</para>
                </listitem>

                <listitem>
                  <para>An exception communicating a safety condition was not
                  covered or another way to inform user about the
                  situation.</para>
                </listitem>
              </itemizedlist></para>
          </listitem>

          <listitem>
            <para>The implementation should be flexible to let the user decide
            what to check, how to inform and</para>
          </listitem>

          <listitem>
            <para>Rules for deciding how to interact with other data types
            need to be defined, for example enabling/disabling casts.</para>
          </listitem>
        </itemizedlist></para>
    </section>

    <section>
      <title>Scope</title>

      <para>Current implementation expects to apply the policies to the native
      Floating Point types :float, double, long double.</para>

      <para>Extending to support Boost.Multiprecission is planned as future
      work.</para>
    </section>

    <section>
      <title>Requirements</title>

      <para>safe_float is a headers-only library with few requirements:</para>

      <para><itemizedlist>
          <listitem>
            <para>A compiler supporting C++11 standard.</para>
          </listitem>

          <listitem>
            <para>A compiler supporting pragma FENV is not required, but
            better performance is expected when supported.</para>
          </listitem>
        </itemizedlist></para>

      <para><itemizedlist>
          <listitem>
            <para>For building examples and tests B2 is used.</para>
          </listitem>
        </itemizedlist></para>

      <itemizedlist>
        <listitem>
          <para>Some examples may have require extra dependencies from Boost,
          including Boost.ProgramOptions.</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para>Tests are implemented using Boost.Test compiled version and
          they require also Boost.MPL.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Current state</title>

      <para>Safe float currently provides numeric_limits, and complete set of
      check policies, including fine grain policies as
      "check_addition_overflow" and coarse grain as "check_all". Composers for
      policies are provided to allow the user select the kind of issues to be
      trapped. Composed set of policies is also provided for
      convenience.</para>

      <para>B2 scripts detect if current compiler has support for FENV pragma,
      and uses it when supported.</para>

      <para>Only one policy is implemented for cast and error_handling so
      far.</para>

      <para>Tests are not yet complete for underflow and invalid result
      policies. </para>

      <para>FENV enabled implementation was never tested since g++ and clang++
      does not support it yet.</para>

      <para>The library was tested mostly using clang.</para>

      <para>The exception strong guarantee may have been broken in some
      places, this is a temporary problem. </para>

      <para>The throw_on_error policy is throwing always std::exception,
      subclasses of it might be used in the future to provide finer grain
      catching.</para>
    </section>
  </section>

  <section id="safe_float.tutorial">
    <title>Tutorial</title>

    <para>In introduction, we showed an example of how overflow of adding two
    non-infinite float variables produce an infinite result. We reproduce the
    same example here for reference.</para>

    <programlisting>#include &lt;iostream&gt;
#include &lt;limits&gt;

int main(){
using namespace std;
float a = numeric_limits&lt;float&gt;::max();
float b = a + numeric_limits&lt;float&gt;::max();
cout &lt;&lt; "b is " &lt;&lt; b &lt;&lt; endl; //outputs: b is inf

return 0;
}</programlisting>

    <para>If we replace the type used by both variables to
    safe_float&lt;float, check_addition_overflow&gt;, the addition would have
    thrown an exception to inform the user.</para>

    <programlisting>#include &lt;iostream&gt;
#include &lt;limits&gt;
#include &lt;boost/safe_float.hpp&gt;

int main(){
using namespace std;
using namespace boost::safe_float;
try {
    safe_float&lt;float,policy::check_addition_overflow&gt; a = numeric_limits&lt;float&gt;::max();
    safe_float&lt;float,policy::check_addition_overflow&gt; b = a + a;
} catch { const boost::safe_float_exception&amp; e) { 
    cout &lt;&lt; "safe_float required guarantees broken" &lt;&lt; endl;
}    

return 0;
}</programlisting>

    <para>Here the addition throws an exception informing the user that one of
    the requirements was not covered by the operation result. It is important
    to notice safe_float does nothing to fix this, the task of the library is
    detect and inform only, user needs to handle the detected problems.</para>

    <para>The minimal granularity of a checking policies is checking one
    operation for a single concern. They can be composed for providing more
    complex checks and affect more operations. The library includes several
    common use compositions under the convenience.hpp file and it is easy to
    introduce new checks for particular purposes if needed. The complete list
    of policies can be found in the Policies section of the
    documentation.</para>

    <para>In some contexts, as real-time critical systems, the use of
    exceptions is restricted or fully deactivated. For this contexts, it is
    useful to specify other error handling methods to be used.</para>

    <para>The following is a example of how to use the library for asserting
    in place of throwing.<programlisting>#include &lt;iostream&gt;
#include &lt;limits&gt;
#include &lt;boost/safe_float.hpp&gt;

int main(){
using namespace std;
using namespace boost::safe_float;
safe_float&lt;float,policy::check_overflow,policy::on_fail_assert&gt; a = numeric_limits&lt;float&gt;::max();
safe_float&lt;float,policy::check_overflow,policy::on_fail_assert&gt; b = a + a;

return 0;
}</programlisting></para>

    <para>Here, assert will be used in place of throw aborting execution and
    informing in debug mode, but having no impact at all in the release mode.
    Other alternatives include abort_on_fail and log_on_fail.</para>

    <para>Another template parameter available is the conversion (or cast)
    policy, this is responsable of deciding how the data type will play with
    others. The default is not interacting with any other. In some cases, we
    would like to accept the wrapped type as parameter of the
    operations.</para>

    <para>The following is an example allowing addition-assigment with wrapped
    type parameter.</para>

    <para><programlisting>#include &lt;iostream&gt;
#include &lt;limits&gt;
#include &lt;boost/safe_float.hpp&gt;

int main(){
using namespace std;
using namespace boost::safe_float;
safe_float&lt;float,policy::check_overflow,policy::on_fail_assert,policy::accept_wrappedtype_params&gt; a = numeric_limits&lt;float&gt;::max();

a += 3.14f; //ok because of accept_wrappedtype_params

return 0;
}</programlisting></para>
  </section>

  <section id="safe_float.notes">
    <title>Notes</title>

    <para>All concepts, types and functions documented are declared in the
    namespace boost::safe_float, except for the policies with are declared
    in</para>

    <para> the namespace boost::safe_float::policy.</para>

    <para>B2 may output an error when detecting FENV, this is just part of the
    detection before compiling, not a real issue.</para>

    <para>An operation producing a denormal result is considered an underflow
    by the policies provided by this library.</para>

    <para>All results producing a NaN are considered invalid results by the
    policies provided by this library. </para>
  </section>

  <section id="safe_float.concepts">
    <title>Concepts</title>

    <para>The architecture is based in policies.</para>

    <section>
      <title>Policy classes</title>

      <para>The library supports three kind of policies: CHECK, ERROR_HANDLING
      and CAST.</para>

      <itemizedlist>
        <listitem>
          <para>CHECK policies receive a template parameter with the wrapped
          floating point datatype and implement the validations as pair of
          functions: pre_operator_check and post_operator_check. Each operator
          calls the pre and post checks defined. Post conditions are those
          doing the actual validation, pre conditions are used to collect
          required information for evaluating the post condition and setup of
          flags.</para>

          <para>Also, CHECK policies define a method for generating the error
          message called operator_failure_message</para>
        </listitem>

        <listitem>
          <para>ERROR_HANDLING policies define how the user would to be
          notified in the case a CHECK fails. A single method is required from
          these classes, report_failure on which a exception can be thrown, a
          message can be output on std::cerr, or any other method.</para>
        </listitem>

        <listitem>
          <para>CAST policies define how will a safe_float play along with
          other datatypes, for example it will tell if operations are allowed
          to receive any parameter being the wrapped type in place of a
          safe_float with exactly the same template parameters. Also, it tells
          if safe_float can be casted to the wrapped type.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section id="safe_float.types">
    <title>Types</title>

    <section>
      <title>safe_float&lt;FP, CHECK, ERROR_HANDLING, CAST&gt;</title>

      <para>This type is the safe_float core, it wraps a FP floating point
      data type. Every operation over this datatype is checked using the CHECK
      policy. When a check fails, it is reported to the user following the
      ERROR_HANDLING policy. If a cast is required by any operation, it should
      be enabled by CAST policy.</para>
    </section>

    <section>
      <title>Policy classes</title>

      <para>A long set of instances for each policy is provided with the
      safe_float library.</para>

      <section>
        <title>CHECK Policy classes</title>

        <para>CHECK policies define the conditions to be evaluated when
        operating.</para>

        <para>The table shows how the policies defined in the library interact
        with each operation and danger.</para>

        <table>
          <title>Table of CHECK policies</title>

          <tgroup cols="4">
            <thead>
              <row>
                <entry>Property</entry>

                <entry>Operation</entry>

                <entry>Policy</entry>

                <entry>Example case</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Overflow</entry>

                <entry>Addition</entry>

                <entry>check_addition_overflow</entry>

                <entry>max() + max()</entry>
              </row>

              <row>
                <entry>Overflow</entry>

                <entry>Subtraction</entry>

                <entry>check_subtraction_overflow</entry>

                <entry>lowest() - max()</entry>
              </row>

              <row>
                <entry>Overflow</entry>

                <entry>Multiplication</entry>

                <entry>check_multiplication_overflow</entry>

                <entry>max() * max()</entry>
              </row>

              <row>
                <entry>Overflow</entry>

                <entry>Division</entry>

                <entry>check_division_overflow</entry>

                <entry>max() / min()</entry>
              </row>

              <row>
                <entry>Inexact Rounding</entry>

                <entry>Addition</entry>

                <entry>check_addition_inexact_rounding</entry>

                <entry>lowest() + min()</entry>
              </row>

              <row>
                <entry>Inexact Rounding</entry>

                <entry>Subtraction</entry>

                <entry>check_subtraction_inexact_rounding</entry>

                <entry>max() - lowest()</entry>
              </row>

              <row>
                <entry>Inexact Rounding</entry>

                <entry>Multiplication</entry>

                <entry>check_multiplication_inexact_rounding</entry>

                <entry>(2*((2^digits)-1))*((2^digits)-1)</entry>
              </row>

              <row>
                <entry>Inexact Rounding</entry>

                <entry>Division</entry>

                <entry>check_division_inexact_rounding</entry>

                <entry>1.0 / 3.0</entry>
              </row>

              <row>
                <entry>Underflow</entry>

                <entry>Addition</entry>

                <entry>check_addition_underflow</entry>

                <entry> 2.2250738585072019e-308 +
                -2.2250738585072014e-308</entry>
              </row>

              <row>
                <entry>Underflow</entry>

                <entry>Subtraction</entry>

                <entry>check_subtraction_underflow</entry>

                <entry>2.2250738585072019e-308 -
                2.2250738585072014e-308</entry>
              </row>

              <row>
                <entry>Underflow</entry>

                <entry>Multiplication</entry>

                <entry>check_multiplication_underflow</entry>

                <entry/>
              </row>

              <row>
                <entry>Underflow</entry>

                <entry>Division</entry>

                <entry>check_division_underflow</entry>

                <entry>min() / max()</entry>
              </row>

              <row>
                <entry>Division by zero</entry>

                <entry>Division</entry>

                <entry>check_division_by_zero</entry>

                <entry>1.0 / 0.0</entry>
              </row>

              <row>
                <entry>Invalid Result (NAN)</entry>

                <entry>Addition</entry>

                <entry>check_addition_invalid_result</entry>

                <entry>infinity() + (- infinity())</entry>
              </row>

              <row>
                <entry>Invalid Result (NAN)</entry>

                <entry>Subtraction</entry>

                <entry>check_subtraction_invalid_result</entry>

                <entry>infinity() - infinity()</entry>
              </row>

              <row>
                <entry>Invalid Result (NAN)</entry>

                <entry>Multiplication</entry>

                <entry>check_multiplication_invalid_result</entry>

                <entry>infinity() * 0.0</entry>
              </row>

              <row>
                <entry>Invalid Result (NAN)</entry>

                <entry>Division</entry>

                <entry>check_division_invalid_result</entry>

                <entry>infinity() / infinity()</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>The policies can be combined defining classes that inherit from
        other policies. This requires some glue code in the case the policies
        combined are not 100% orthogonal, this glue is implemented
        boost::safe_float::compose_check_policy.</para>

        <para>The following is a table of convenient combined policies already
        available in the library and their components.</para>

        <table>
          <title>Table of CHECK composed policies</title>

          <tgroup cols="4">
            <thead>
              <row>
                <entry>Property</entry>

                <entry>Operation</entry>

                <entry>Policy</entry>

                <entry>Components</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Overflow</entry>

                <entry>All Arithmetic</entry>

                <entry>check_overflow</entry>

                <entry>check_{addition,subtraction,multiplication,division}_overflow</entry>
              </row>

              <row>
                <entry>Inexact Rounding</entry>

                <entry>All Arithmetic</entry>

                <entry>check_inexact_rounding</entry>

                <entry>check_{addition,subtraction,multiplication,division}_inexact_rounding</entry>
              </row>

              <row>
                <entry>Underflow</entry>

                <entry>All Arithmetic</entry>

                <entry>check_underflow</entry>

                <entry>check_{addition,subtraction,multiplication,division}_underflow</entry>
              </row>

              <row>
                <entry>Invalid Result</entry>

                <entry>All Arithmetic</entry>

                <entry>check_invalid_result</entry>

                <entry>check_{addition,subtraction,multiplication,division}_nan</entry>
              </row>

              <row>
                <entry>Bothflows</entry>

                <entry>All arithmetic</entry>

                <entry>check_bothflows</entry>

                <entry>check_{under,over}_flow</entry>
              </row>

              <row>
                <entry>All</entry>

                <entry>All arithmetic</entry>

                <entry>check_all</entry>

                <entry>check_{bothflow,division_by_zero,inexact_rounding,nan}</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>For combining the Policies a check_composer class is used called
        compose_check, this class recieves the FP datatypes as first template
        parameter and the list of policies to be composed into the new
        policy.</para>

        <para>The composed policy, will call sequentially each pre and post
        condition on each policy and return false if any check returns false,
        and true when every check returned true.</para>

        <para>The composed policies listed in previous check are defined using
        the compose_check in the convenience header file.</para>
      </section>

      <section>
        <title>ERROR_HANDLING Policy classes</title>

        <para>ERROR_HANDLING policies are focus in how a validation failure is
        notified to the user.</para>

        <para>Options are:</para>

        <itemizedlist>
          <listitem>
            <para>on_fail_throw : Throws an safe_float_exception when the
            checks fail.</para>
          </listitem>

          <listitem>
            <para>on_fail_abort : Calls std::abort() when the check
            fails.</para>
          </listitem>

          <listitem>
            <para>on_fail_assert : Inserts an assert for each condition, it
            makes safe the debuging only.</para>
          </listitem>

          <listitem>
            <para>on_fail_log : This logs each error into a stream that needs
            to be declared and silently continues its execution.</para>
          </listitem>

          <listitem>
            <para>on_fail_cerr : This is a particular case of on_fail_log.
            Here the log is output to stadard error.</para>
          </listitem>
        </itemizedlist>

        <para>Extending the list of options is as easy as defining a class
        with the method: void report_failure(std::string&amp; message);</para>
      </section>

      <section>
        <title>CAST Policy classes</title>

        <para>CAST policies define how the safe_float instance will play with
        other data types.</para>

        <para>Options implemented by the library are:
        cast_wrapped_type_params, cast_to_wrapped_type, cast_both_ways,
        no_cast.</para>

        <para>In cast_wrapped_type_params, if a operation is called with a
        parameter of wrapped type, it is casted to safe_float and used.</para>

        <para>In cast_to_wrapped_type, a cast overload is defined to cast the
        safe_float to its wrapped type.</para>

        <para>In cast_both_ways, both of previous casts are
        implemented.</para>

        <para>In no_cast, nothing is casted.</para>
      </section>

      <section>
        <title>Numeric Limits</title>

        <para>In safe_float a new specialization of numeric_limits is defined
        for each wrapped number. For most functions and constants the values
        are obtained from the original number.</para>

        <para>The few methods/constants that are not aliased to the wrapped
        type are listed below.</para>

        <para><itemizedlist>
            <listitem>
              <para>is_exact is true if the wraped type is or if all operation
              are checked for inexact results by the wrapper. Same applies to
              round_style and round_error.</para>
            </listitem>

            <listitem>
              <para>has_quiet_NaN is true if the wraped type has quiet NaN and
              no check is introduced by the wrapper to catch them.</para>
            </listitem>

            <listitem>
              <para>has_signaling_NaN is true if the wraped type has signaling
              NaN and no check is introduced by the wrapper to catch
              them.</para>
            </listitem>

            <listitem>
              <para>Functions returning a safe_float: min, max, lowest,
              quit_NaN, signaling_NaN, epsilon, round_error, infinity,
              denorm_min. They return the value returned by the wrapped type
              wrapped by safe_float.</para>
            </listitem>
          </itemizedlist></para>
      </section>

      <section>
        <title>FENV_AVAILABLE constant</title>

        <para>Each CHECK policy is implemented using fenv functions and
        without using fenv functions. The selection of which implementation is
        compiled is selected by the FENV_AVAILABLE constant. This constant is
        passed to the compiler automaticly by the b2 script if the pragma to
        make them safe is available.</para>
      </section>
    </section>
  </section>

  <section id="safe_float.functions">
    <title>Functions</title>

    <para>Helper functions are defined for common day-to-day
    operations.</para>

    <para>safe_cast and safe_compare</para>

    <programlisting>Functions code ;</programlisting>

    <para/>
  </section>

  <section id="safe_float.exceptionsafety">
    <title>Exception safety</title>

    <para>This library covers Strong Guarantee for every type, including the
    policies. </para>

    <para/>
  </section>

  <section id="safe_float.rationale">
    <title>Rationale</title>

    <qandaset>
      <qandaentry>
        <question>
          <para>Why to implement compose_*_policy in place of using variadic
          templates.</para>
        </question>

        <answer>
          <para>Variadic Templates can be used only as the last template
          parameter and we have in mind allowing compose on at least 2 policy
          parameters, the CHECK and the CAST.</para>
        </answer>
      </qandaentry>
    </qandaset>

    <qandaset>
      <qandadiv>
        <qandaentry>
          <question>
            <para>Why all check individual policies derive from check_policy
            and the compose does it too?</para>
          </question>

          <answer>
            <para>To allow individual policies to be accepted individually
            with no need for compose, also it simplifies very much the
            composition.</para>
          </answer>
        </qandaentry>
      </qandadiv>
    </qandaset>
  </section>

  <section id="safe_float.changelog">
    <title>Change Log</title>

    <para/>
  </section>

  <section id="safe_float.references">
    <title>References</title>

    <itemizedlist>
      <listitem>
        <para>[1] Goldberg, David. "What every computer scientist should know
        about floating-point arithmetic." ACM Computing Surveys (CSUR) 23.1
        (1991): 5-48.</para>
      </listitem>
    </itemizedlist>

    <para><itemizedlist>
        <listitem>
          <para>[2] <ulink
          url="http://www.intel.fr/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf">Intel®
          64 and IA-32 Architectures Software Developer’s Manual - Volume
          2</ulink> (specially sections about FP flags in FADD, FSUB, FMUL and
          FDIV)</para>
        </listitem>

        <listitem>
          <para>[3] <ulink
          url="https://software.intel.com/en-us/articles/x87-and-sse-floating-point-assists-in-ia-32-flush-to-zero-ftz-and-denormals-are-zero-daz">x87
          and SSE Floating Point Assists in IA-32: Flush-To-Zero (FTZ) and
          Denormals-Are-Zero (DAZ)</ulink></para>
        </listitem>
      </itemizedlist></para>
  </section>
</library>
