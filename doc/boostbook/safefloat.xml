<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.1//EN"
"http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<library dirname="safe_float" id="safe_float"
         last-revision="$Date: 2018-06-17$" name="safe_float"
         url="https://github.com/sdavtaker/safe_float">
  <title><libraryname
  last-revision="2018-06-17">safe_float</libraryname></title>

  <libraryinfo>
    <author>
      <firstname>Damián</firstname>

      <surname>Vicino</surname>
    </author>

    <copyright>
      <year>2015-2018</year>

      <holder>Damián Vicino</holder>
    </copyright>

    <legalnotice>
      <para><ulink url="http://www.boost.org/users/license.html">BOOST
      License</ulink></para>
    </legalnotice>

    <librarypurpose>Safe Floating Point Operation</librarypurpose>

    <librarycategory name="">Numerics</librarycategory>
  </libraryinfo>

  <section id="safe_float.introduction">
    <title>Introduction</title>

    <section>
      <title>Motivation</title>

      <para>Arithmetic operations in C++ are NOT guaranteed to yield a correct
      mathematical result. For instance, the overflow on addition operation
      may produce an infinite value. Safe Float proposes implementing a
      drop-in replacement for floating point numeric data types guaranteeing
      that, when used in expressions in a C++ program, no unexpected arithmetic
      results will be produced silently without the developer awareness.</para>

      <para>An example of the problem:</para>

      <programlisting>#include &lt;iostream&gt;
#include &lt;limits&gt;

int main(){
using namespace std;
float a = numeric_limits&lt;float&gt;::max();
float b = a + numeric_limits&lt;float&gt;::max();
cout &lt;&lt; "b is " &lt;&lt; b &lt;&lt; endl;

return 0;
}</programlisting>

      <para>Executing this code outputs:</para>

      <programlisting>b is inf</programlisting>

      <para>This is a convenient fallback for the overflow in some contexts,
      but an unexpected silent surprise in others. Overflow to infinite is not
      the only surprise silently introduced by floating point operations,
      neither the most dangerous. it is actually the one most programmers care
      to check.</para>

      <para>In 1991, David Goldberg collected a list of the most common
      dangers when developing using Floating Point, which can be found on his
      paper: "What every computer scientist should know about floating-point
      arithmetic".</para>

      <para>Most important dangers can be classified as follows:</para>

      <para><itemizedlist>
          <listitem>
            <para>Rounding error</para>

            <para>Some operations may require rounding the result. (i.e.
            because the mantissa is not large enough to keep the
            result.)</para>

            <para>Definition error. (i.e. 0.3 is not expressible as Floating
            Point.)</para>

            <para>An interesting side-effect of rounding is that operations
            are not guaranteed to be reversible: a != a+b-b is a valid
            result.</para>
          </listitem>

          <listitem>
            <para>Not a Number</para>

            <para>Some operations may produce Not a Number results, and they
            are not detected until used (if signalling is on).</para>
          </listitem>

          <listitem>
            <para>Infinity by overflow</para>

            <para>Infinity arithmetic is useful mostly when infinity values
            are defined by user, and not because of an overflow.</para>
          </listitem>

          <listitem>
            <para>Signed zero</para>

            <para>In some cases as discontinuous functions the negative zero
            have important use.</para>
          </listitem>

          <listitem>
            <para>Underflow (considering and not considering normalised
            numbers as underflow)</para>
          </listitem>
        </itemizedlist></para>

      <para>A real world example of the issue is the use of Floating Point in
      Discrete Event System Specification simulation to define the temporal
      position of the events in a Real timeline. In this context, developers
      intensively use Floating Point and they usually give a special meaning
      to the infinite values called Passive state in the literature. In their
      context, an infinite obtained as overflow operating with finite numbers
      produces incorrect simulation result, because it silently changes the
      state to passive when it should not.</para>

      <para>In C++11 standard cfenv.h was introduced facilitating the access
      to the Floating Point Unit flags for controlling and checking
      information related to Floating Point operations. This allows us to have
      a higher level of control than the one we had on traditional C++.</para>

      <para>Anyway, developer intervention is required for checking every
      Floating Point operation was conducted as expected. Doing so, renders
      the code harder to read, maintain and it adds a new source of potential
      programming errors.</para>

      <para>Safe_float proposes the introduction of a class template wrapping
      Floating Point data types introducing safety checks for arithmetic
      operations. In the case an operation result is unreliable it reports the
      user properly.</para>

      <para>Depending on the algorithms implemented, different safety measures
      may be required, in our previously described example with the use of
      infinities for Discrete Event Simulation, the algorithms are not
      sensitive to rounding and this should not be treated as a safety
      problem, neither have a performance penalty based the unused
      check.</para>

      <para>Since, the reliability of the results is based on the algorithms
      used, we propose letting developers declare their concerns using
      template parameters as policies.</para>

      <para> We try to provide policies for most of the dangers before mentioned. However,
      some of the checks may be missing. To see the full list of the checks implemented by
      safe_float please check the Policies section of the documentation. </para>

      <para>We show some usage examples below for illustration.</para>

      <programlisting>//no underflow example

safe_numerics&lt;double, no_underflow, throw_on_fail&gt; a = 1;

safe_numerics&lt;double, no_underflow, throw_on_fail&gt; b = numeric_limits&lt;double&gt;::max();

safe_numerics&lt;double, no_underflow, throw_on_fail&gt; c =  a / b ; //throws because of underflow.

//no rounding example

safe_numerics&lt;double, no_rounding, abort_on_fail&gt; d = 0.3; // compilation error, the number is not representable.

safe_numerics&lt;double, no_rounding, abort_on_fail&gt; e = 2E25; 

safe_numerics&lt;double, no_rounding, abort_on_fail&gt; f = 2E100;

safe_numerics&lt;double, no_rounding, abort_on_fail&gt; g = e + f ; //aborts execution with runtime error.

//multiple conditions example

safe_numerics&lt;double, BSF_COMBINE(no_rounding, no_overflow_to_infinity)&gt; h = numeric_limits&lt;double&gt;::max();

safe_numerics&lt;double, BSF_COMBINE(no_rounding, no_overflow_to_infinity)&gt; i =  numeric_limits&lt;double&gt;::max();

safe_numerics&lt;double, BSF_COMBINE(no_rounding, no_overflow_to_infinity)&gt; j = h + i; // throws because of overflow to infinity.</programlisting>

      <para/>
    </section>

    <section>
      <title>The library</title>

      <para><itemizedlist>
          <listitem>
            <para>Provides a drop-in replacement for native Floating Point data types
            producing one of the following outcomes for each operation:</para>

            <para><itemizedlist>
                <listitem>
                  <para>A valid result covering the user safety
                  definition.</para>
                </listitem>

                <listitem>
                  <para>A compilation error.</para>
                </listitem>

                <listitem>
                  <para>A (customized) report of the safety condition was not
                  covered, for example by throwing an exception or loging the violation.</para>
                </listitem>
              </itemizedlist></para>
          </listitem>

          <listitem>
            <para>The implementation is based in user defined policies that 
            encapsulate what to check and how to how to inform when check fails.</para>
          </listitem>
        </itemizedlist></para>
    </section>

    <section>
      <title>Current limitations</title>

      <para>Current implementation apply the policies to the native
      Floating Point types: float, double, long double. The checks are limited
      to arithmetic operators and numeric_limits is specialized safe_float</para>

      <para>Extending to support Boost.Multiprecission is planned as future
      work. Also, we plan for future work adding support for Boost.Math and std::math.</para>
    </section>

    <section>
      <title>Requirements</title>

      <para>safe_float is a headers-only library with few requirements:</para>

      <para><itemizedlist>
          <listitem>
            <para>A compiler supporting C++17 standard.</para>
          </listitem>

          <listitem>
            <para>A compiler supporting pragma FENV is not required.</para>
          </listitem>
        </itemizedlist></para>

      <para><itemizedlist>
          <listitem>
            <para>For building examples and tests B2 is used.</para>
            <para>Alternatively support for cmake is also offered. </para>
          </listitem>
        </itemizedlist></para>

      <itemizedlist>
        <listitem>
          <para>Some examples may have require extra dependencies from Boost,
          including Boost.ProgramOptions, but these dependencies are not necessary 
          for using the library.</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para>Tests are implemented using Boost.Test compiled version and
          they require also Boost.MPL.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Current limitations</title>
      <para>B2 scripts detect if current compiler has support for FENV pragma,
      however, it is not detected in cmake builts, neither it is used for optimizations.</para>

      <para>FENV enabled implementation was never tested since g++ and clang++
      does not support it yet.</para>

      <para>The exception strong guarantee may have been broken in some
      places, this is a temporary problem. </para>

      <para>The throw_on_error reporter is throwing always boost::safe_float_exception,
      subclasses of it might be used in the future to provide finer grain
      catching.</para>
    </section>
  </section>

  <section id="safe_float.tutorial">
    <title>Tutorial</title>

    <para>In introduction, we showed an example of how overflow of adding two
    non-infinite float variables produce an infinite result. We reproduce the
    same example here for reference.</para>

    <programlisting>#include &lt;iostream&gt;
#include &lt;limits&gt;

int main(){
using namespace std;
float a = numeric_limits&lt;float&gt;::max();
float b = a + numeric_limits&lt;float&gt;::max();
cout &lt;&lt; "b is " &lt;&lt; b &lt;&lt; endl; //outputs: b is inf

return 0;
}</programlisting>

    <para>If we replace the type used by both variables to
    safe_float&lt;float, check_addition_overflow&gt;, the addition would have
    thrown an exception to inform the user.</para>

    <programlisting>#include &lt;iostream&gt;
#include &lt;limits&gt;
#include &lt;boost/safe_float.hpp&gt;

int main(){
using namespace std;
using namespace boost::safe_float;
try {
    using sf_without_overflow = safe_float&lt;float,policy::check_addition_overflow&gt;;
    sf_without_overflow a = numeric_limits&lt;sf_without_overflow &gt;::max();
    sf_without_overflow b = a + a;
} catch { const boost::safe_float_exception&amp; e) { 
    cout &lt;&lt; "safe_float required guarantees broken" &lt;&lt; endl;
}    

return 0;
}</programlisting>

    <para>Here the addition throws an exception informing the user that one of
    the requirements was not covered by the operation result. It is important
    to notice safe_float does nothing to fix this, the task of the library is
    detect and inform only, user needs to handle the detected problems.</para>

    <para>The minimal granularity of a checking policies is checking one
    operation for a single concern. They can be composed for providing more
    complex checks and affect more operations. The library includes several
    common use compositions under the convenience.hpp file and it is easy to
    introduce new checks for particular purposes if needed. The complete list
    of policies can be found in the Policies section of the documentation.
    The list of policies do not restrict to only flags in the FENV being checked, 
    but also include policies to define how to safe_float plays along with other datatypes. 
    For example, policy::allow_cast_to&lt;T&gt; defines if a cast to T is allowed or not. </para>

    <para>The following is an example allowing to cast from integer to safe_float 
    and checking for overflow in additions.</para>

    <para><programlisting>#include &lt;iostream&gt;
#include &lt;limits&gt;
#include &lt;boost/safe_float.hpp&gt;

int main(){
using namespace std;
using namespace boost::safe_float;
using sf = safe_float&lt;float,
                      policy::compose&lt;check_overflow&gt;,
                      policy::allow_cast_from&lt;int&gt;
                      &gt;;
int i = 1;
double d = 2.0;
sf a{i}; //works
sf b{d}; //fails compilation

return 0;
}</programlisting></para>

    <para>In some contexts, as real-time critical systems, the use of
    exceptions is restricted or fully deactivated. For this contexts, it is
    useful to specify other error handling methods to be used. For a full list
    of reported methods and how to define a custom one, please check the Concept 
    reporter documentation.</para>

    <para>The following is a example of how to use the library for asserting
    in place of throwing.<programlisting>#include &lt;iostream&gt;
#include &lt;limits&gt;
#include &lt;boost/safe_float.hpp&gt;

int main(){
using namespace std;
using namespace boost::safe_float;
using sf_asserting_overflows=safe_float&lt;float,policy::check_overflow&lt;reporter::on_fail_assert&gt;&gt;;
sf_asserting_overflows a = numeric_limits&lt;sf_asserting_overflows&gt;::max();
sf_asserting_overflows b = a + a;

return 0;
}</programlisting></para>

    <para>Here, assert will be used in place of throw aborting execution and
    informing in debug mode, but having no impact at all in the release mode.
    Other alternative reporters provided include abort_on_fail, throw_on_fail, 
    unexpected_on_fail, and log_on_fail.</para>
</section>

  <section id="safe_float.notes">
    <title>Notes</title>

    <para>All concepts, types and functions documented are declared in the
    namespace boost::safe_float. Including policies declared
    in the namespace boost::safe_float::policy, and reporters declared in the
    namespace boost::safe_float::reporters.</para>

    <para>B2 may output an error when detecting FENV, this is just part of the
    detection before compiling, not a real issue.</para>

    <para>An operation producing a denormal result is considered an underflow
    by the policies provided by this library.</para>

    <para>All results producing a NaN are considered invalid results by the
    policies provided by this library.</para>
  </section>

  <section id="safe_float.concepts">
    <title>Concepts</title>

    <para>The architecture is based in policies.</para>

    <section>
      <title>Policy classes</title>

      <para>Policies define how a check is performed and calls the reporter for notification when check fails. 
      The reporter class is received by template parameter. </para>

      <itemizedlist>
        <listitem>
          <para>CHECK policies receive a template parameter with the wrapped
          floating point datatype and implement the validations as pair of
          functions: pre_operator_check and post_operator_check. Each operator
          calls the pre and post checks defined. Post conditions are those
          doing the actual validation, pre conditions are used to collect
          required information for evaluating the post condition and setup of
          flags if required.</para>

          <para>CHECK policies also receive a template parameter with a reporter class.
          The static method report is called on the reporter class when a check fails.</para>
        </listitem>
      </itemizedlist>
      </section>
      
      <section>
      <title>Reporter classes</title>
      <para>Reporter classes are used for reporting check failures in policies.</para>
      <itemizedList>
        <listitem>
          <para>
          The reporter classes define how the user would to be notified in the 
          case a CHECK fails. A single static method is required from
          these classes, report_failure on which a exception can be thrown, a
          message can be output on std::cerr, a unexpected could be returned, 
          an abort can be executed, or any other behavior decided by the user.</para>
        </listitem>
      </itemizedList>
    </section>
  </section>

  <section id="safe_float.types">
    <title>Types</title>

    <section>
      <title>safe_float&lt;FP, REPORTING_CHECK&gt;</title>

      <para>This type is the safe_float core, it wraps a FP floating point
      data type. Every operation over this datatype is checked and reported by 
      using the REPORTING_CHECK policy. </para>
    </section>

    <section>
      <title>Policy classes</title>

      <para>A long set of instances for each policy is provided with the
      safe_float library.</para>

      <section>
        <title>CHECK Policy classes</title>

        <para>CHECK policies are templates that define the conditions to be evaluated when
        operating. The only parameter they require is the REPORTER class to do the notifications.</para>

        <para>The table shows how the policies defined in the library interact
        with each operation and danger.</para>

        <table>
          <title>Table of CHECK policies</title>

          <tgroup cols="4">
            <thead>
              <row>
                <entry>Property</entry>

                <entry>Operation</entry>

                <entry>Policy</entry>

                <entry>Example case</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Overflow</entry>

                <entry>Addition</entry>

                <entry>check_addition_overflow</entry>

                <entry>max() + max()</entry>
              </row>

              <row>
                <entry>Overflow</entry>

                <entry>Subtraction</entry>

                <entry>check_subtraction_overflow</entry>

                <entry>lowest() - max()</entry>
              </row>

              <row>
                <entry>Overflow</entry>

                <entry>Multiplication</entry>

                <entry>check_multiplication_overflow</entry>

                <entry>max() * max()</entry>
              </row>

              <row>
                <entry>Overflow</entry>

                <entry>Division</entry>

                <entry>check_division_overflow</entry>

                <entry>max() / min()</entry>
              </row>

              <row>
                <entry>Inexact Rounding</entry>

                <entry>Addition</entry>

                <entry>check_addition_inexact_rounding</entry>

                <entry>lowest() + min()</entry>
              </row>

              <row>
                <entry>Inexact Rounding</entry>

                <entry>Subtraction</entry>

                <entry>check_subtraction_inexact_rounding</entry>

                <entry>max() - lowest()</entry>
              </row>

              <row>
                <entry>Inexact Rounding</entry>

                <entry>Multiplication</entry>

                <entry>check_multiplication_inexact_rounding</entry>

                <entry>(2*((2^digits)-1))*((2^digits)-1)</entry>
              </row>

              <row>
                <entry>Inexact Rounding</entry>

                <entry>Division</entry>

                <entry>check_division_inexact_rounding</entry>

                <entry>1.0 / 3.0</entry>
              </row>

              <row>
                <entry>Underflow</entry>

                <entry>Addition</entry>

                <entry>check_addition_underflow</entry>

                <entry> 2.2250738585072019e-308 +
                -2.2250738585072014e-308</entry>
              </row>

              <row>
                <entry>Underflow</entry>

                <entry>Subtraction</entry>

                <entry>check_subtraction_underflow</entry>

                <entry>2.2250738585072019e-308 -
                2.2250738585072014e-308</entry>
              </row>

              <row>
                <entry>Underflow</entry>

                <entry>Multiplication</entry>

                <entry>check_multiplication_underflow</entry>

                <entry/>
              </row>

              <row>
                <entry>Underflow</entry>

                <entry>Division</entry>

                <entry>check_division_underflow</entry>

                <entry>min() / max()</entry>
              </row>

              <row>
                <entry>Division by zero</entry>

                <entry>Division</entry>

                <entry>check_division_by_zero</entry>

                <entry>1.0 / 0.0</entry>
              </row>

              <row>
                <entry>Invalid Result (NAN)</entry>

                <entry>Addition</entry>

                <entry>check_addition_invalid_result</entry>

                <entry>infinity() + (- infinity())</entry>
              </row>

              <row>
                <entry>Invalid Result (NAN)</entry>

                <entry>Subtraction</entry>

                <entry>check_subtraction_invalid_result</entry>

                <entry>infinity() - infinity()</entry>
              </row>

              <row>
                <entry>Invalid Result (NAN)</entry>

                <entry>Multiplication</entry>

                <entry>check_multiplication_invalid_result</entry>

                <entry>infinity() * 0.0</entry>
              </row>

              <row>
                <entry>Invalid Result (NAN)</entry>

                <entry>Division</entry>

                <entry>check_division_invalid_result</entry>

                <entry>infinity() / infinity()</entry>
              </row>

              <row>
                <entry>Cast to</entry>

                <entry>Assignment</entry>

                <entry>allow_cast_to&lt;T&gt;</entry>

                <entry>T x = sf;</entry>
              </row>

              <row>
                <entry>Cast from</entry>

                <entry>Assignment</entry>

                <entry>allow_cast_from&lt;T&gt;</entry>

                <entry>T x; sf = x;</entry>
              </row>

            </tbody>
          </tgroup>
        </table>

        <para>The policies can be combined defining classes that inherit from
        other policies. This requires some glue code in the case the policies
        combined are not 100% orthogonal, this glue is implemented
        boost::safe_float::policy::compose.</para>

        <para>The following is a table of convenient combined policies already
        available in the library and their components.</para>

        <table>
          <title>Table of CHECK composed policies</title>

          <tgroup cols="4">
            <thead>
              <row>
                <entry>Property</entry>

                <entry>Operation</entry>

                <entry>Policy</entry>

                <entry>Components</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Overflow</entry>

                <entry>All Arithmetic</entry>

                <entry>check_overflow</entry>

                <entry>check_{addition,subtraction,multiplication,division}_overflow</entry>
              </row>

              <row>
                <entry>Inexact Rounding</entry>

                <entry>All Arithmetic</entry>

                <entry>check_inexact_rounding</entry>

                <entry>check_{addition,subtraction,multiplication,division}_inexact_rounding</entry>
              </row>

              <row>
                <entry>Underflow</entry>

                <entry>All Arithmetic</entry>

                <entry>check_underflow</entry>

                <entry>check_{addition,subtraction,multiplication,division}_underflow</entry>
              </row>

              <row>
                <entry>Invalid Result</entry>

                <entry>All Arithmetic</entry>

                <entry>check_invalid_result</entry>

                <entry>check_{addition,subtraction,multiplication,division}_nan</entry>
              </row>

              <row>
                <entry>Bothflows</entry>

                <entry>All arithmetic</entry>

                <entry>check_bothflows</entry>

                <entry>check_{under,over}_flow</entry>
              </row>

              <row>
                <entry>All</entry>

                <entry>All arithmetic</entry>

                <entry>check_all</entry>

                <entry>check_{bothflow,division_by_zero,inexact_rounding,nan}</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>For combining the Policies a composer function is used called
        policy::compose, the function receives variadic template list of policies
        and returns a new policy type.</para>

        <para>The composed policy, will call sequentially each pre and post
        condition on each policy and return false if any check returns false,
        and true when every check returned true.</para>

        <para>The composed policies listed in previous check are defined using
        the policy::compose in the convenience header file.</para>
      </section>

      <section>
        <title>Reporting classes</title>

        <para>Reporting classes are focus in how a validation failure is
        notified to the user.</para>

        <para>Options available out of the box are:</para>

        <itemizedlist>
          <listitem>
            <para>on_fail_throw : Throws a safe_float_exception when the
            checks fail.</para>
          </listitem>

          <listitem>
            <para>on_fail_abort : Calls std::abort() when the check
            fails.</para>
          </listitem>

          <listitem>
            <para>on_fail_assert : Inserts an assert for each condition, it
            makes safe the debuging only.</para>
          </listitem>

          <listitem>
            <para>on_fail_log : This logs each error into a stream that needs
            to be declared and silently continues its execution.</para>
          </listitem>

          <listitem>
            <para>on_fail_cerr : This is a particular case of on_fail_log.
            Here the log is output to stadard error.</para>
          </listitem>

          <listitem>
            <para>on_fail_unexpected (experimental) : This adds support to wrap 
            safe_float into a Boost.Expected class, and return unexpected on check fail.</para>
          </listitem>

        </itemizedlist>

        <para>Extending the list of options is as easy as defining a class
        with the method: static void report_failure(const std::string&amp; message);</para>
      </section>

      <section>
        <title>Numeric Limits</title>

        <para>In safe_float a new specialization of numeric_limits is defined
        for each wrapped number. For most functions and constants the values
        are obtained from the original number.</para>

        <para>The few methods/constants that are not aliased to the wrapped
        type are listed below.</para>

        <para><itemizedlist>
            <listitem>
              <para>is_exact is true if the wraped type is or if all operation
              are checked for inexact results by the wrapper. Same applies to
              round_style and round_error.</para>
            </listitem>

            <listitem>
              <para>has_quiet_NaN is true if the wraped type has quiet NaN and
              no check is introduced by the wrapper to catch them.</para>
            </listitem>

            <listitem>
              <para>has_signaling_NaN is true if the wraped type has signaling
              NaN and no check is introduced by the wrapper to catch
              them.</para>
            </listitem>

            <listitem>
              <para>Functions returning a safe_float: min, max, lowest,
              quit_NaN, signaling_NaN, epsilon, round_error, infinity,
              denorm_min. They return the value returned by the wrapped type
              wrapped by safe_float.</para>
            </listitem>
          </itemizedlist></para>
      </section>

      <section>
        <title>FENV_AVAILABLE constant</title>

        <para>Each CHECK policy is implemented using fenv functions and
        without using fenv functions. The selection of which implementation is
        compiled is selected by the FENV_AVAILABLE constant. This constant is
        passed to the compiler automaticly by the b2 script if the pragma to
        make them safe is available. This convenient detection was not 
        implemented in cmake scripts yet.</para>
      </section>
  
	 <section id="safe_float.exceptionsafety">
	    <title>Exception safety</title>
	
	    <para>This library covers Strong Guarantee for every type, including the
	    policies. </para>
	
	 </section>
    </section>
</section>

  <section id="safe_float.rationale">
    <title>Rationale</title>

    <qandaset>
      <qandaentry>
        <question>
          <para>Why to implement composer for policy in place of using variadic
          templates.</para>
        </question>

        <answer>
          <para>Policies can be complex and reusable. We want to allow users to define
          them using the using keyword for that purpose. Composer allows easily to do that.</para>
        </answer>
      </qandaentry>
    </qandaset>

    <qandaset>
      <qandadiv>
        <qandaentry>
          <question>
            <para>Why not all policies derive from same class?</para>
          </question>

          <answer>
            <para>That generate problems with inheritance rules at the composer level making some 
            methods be reported by compiler as hidden.</para>
          </answer>
        </qandaentry>
      </qandadiv>
    </qandaset>

    <qandaset>
      <qandadiv>
        <qandaentry>
          <question>
              <para>What is the difference between safefloat and what I can get from e.g. the Intel compiler by enabling FPEs?</para>
          </question>

          <answer>
            <para>In general, the main differences are Flexibility, customization of reporting, and multiplatform/compiler.</para>
            <itemizedlist>
              <listitem>Flexibility: Safefloat adds more granular control than FPE. FPE affects every variable in the system the same, while safefloat can be used to enforce some checks for a subgroup of all the floating point variables in the program or library, and even set different checks for different variables.</listitem>            
              <listitem>Customization of reporting: Safefloat provides more options on how to react to failure. FPE will abort, while safefloat library provides different strategies to act when a check fails, it may be the case that you can expect a check to fail under certain conditions (exceptional behavior). An alternative would be to manually check flags after each operation, in place of doing that, safe float could throw an exception that can be handled properly. </listitem>
              <listitem>Multiplatform/compiler: Safefloat is C++17 standard compliand and it should work in any compiler implementing that standard.</listitem>
            </itemizedlist>   
          </answer>
        </qandaentry>
      </qandadiv>
    </qandaset>
  </section>

  

  <section id="safe_float.changelog">
    <title>Change Log</title>

    <para/>
  </section>
  <section id="safe_float.references">
    <title>References</title>

    <itemizedlist>
      <listitem>
        <para>[1] Goldberg, David. "What every computer scientist should know
        about floating-point arithmetic." ACM Computing Surveys (CSUR) 23.1
        (1991): 5-48.</para>
      </listitem>
    </itemizedlist>

    <para><itemizedlist>
        <listitem>
          <para>[2] <ulink
          url="http://www.intel.fr/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf">Intel®
          64 and IA-32 Architectures Software Developer’s Manual - Volume
          2</ulink> (specially sections about FP flags in FADD, FSUB, FMUL and
          FDIV)</para>
        </listitem>

        <listitem>
          <para>[3] <ulink
          url="https://software.intel.com/en-us/articles/x87-and-sse-floating-point-assists-in-ia-32-flush-to-zero-ftz-and-denormals-are-zero-daz">x87
          and SSE Floating Point Assists in IA-32: Flush-To-Zero (FTZ) and
          Denormals-Are-Zero (DAZ)</ulink></para>
        </listitem>
      </itemizedlist></para>
  </section>
</library>